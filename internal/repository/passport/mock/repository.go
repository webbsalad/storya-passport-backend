// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/passport/repository.go

// Package mock_passport is a generated GoMock package.
package mock_passport

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/webbsalad/storya-passport-backend/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, userID model.UserID, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, userID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, userID, email)
}

// GetPasswordHash mocks base method.
func (m *MockRepository) GetPasswordHash(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordHash", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordHash indicates an expected call of GetPasswordHash.
func (mr *MockRepositoryMockRecorder) GetPasswordHash(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordHash", reflect.TypeOf((*MockRepository)(nil).GetPasswordHash), ctx, name)
}

// GetSessionInfo mocks base method.
func (m *MockRepository) GetSessionInfo(ctx context.Context, name string) (model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionInfo", ctx, name)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionInfo indicates an expected call of GetSessionInfo.
func (mr *MockRepositoryMockRecorder) GetSessionInfo(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionInfo", reflect.TypeOf((*MockRepository)(nil).GetSessionInfo), ctx, name)
}

// GetTokenVersion mocks base method.
func (m *MockRepository) GetTokenVersion(ctx context.Context, userID model.UserID, deviceID model.DeviceID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenVersion", ctx, userID, deviceID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenVersion indicates an expected call of GetTokenVersion.
func (mr *MockRepositoryMockRecorder) GetTokenVersion(ctx, userID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenVersion", reflect.TypeOf((*MockRepository)(nil).GetTokenVersion), ctx, userID, deviceID)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, userID model.UserID) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, userID)
}

// LogOut mocks base method.
func (m *MockRepository) LogOut(ctx context.Context, userID model.UserID, deviceID model.DeviceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", ctx, userID, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockRepositoryMockRecorder) LogOut(ctx, userID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockRepository)(nil).LogOut), ctx, userID, deviceID)
}

// Register mocks base method.
func (m *MockRepository) Register(ctx context.Context, emailID model.EmailID, name, passwordHash string) (model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, emailID, name, passwordHash)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRepositoryMockRecorder) Register(ctx, emailID, name, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRepository)(nil).Register), ctx, emailID, name, passwordHash)
}

// UpdateTokenVersion mocks base method.
func (m *MockRepository) UpdateTokenVersion(ctx context.Context, session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenVersion", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokenVersion indicates an expected call of UpdateTokenVersion.
func (mr *MockRepositoryMockRecorder) UpdateTokenVersion(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenVersion", reflect.TypeOf((*MockRepository)(nil).UpdateTokenVersion), ctx, session)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(ctx context.Context, userID model.UserID, name, passwordHash string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userID, name, passwordHash)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(ctx, userID, name, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), ctx, userID, name, passwordHash)
}
