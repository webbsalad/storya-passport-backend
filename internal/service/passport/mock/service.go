// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/passport/service.go

// Package mock_passport is a generated GoMock package.
package mock_passport

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/webbsalad/storya-passport-backend/internal/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckToken mocks base method.
func (m *MockService) CheckToken(ctx context.Context, token string) (model.UserID, model.DeviceID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", ctx, token)
	ret0, _ := ret[0].(model.UserID)
	ret1, _ := ret[1].(model.DeviceID)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockServiceMockRecorder) CheckToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockService)(nil).CheckToken), ctx, token)
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, userID model.UserID, emailID model.EmailID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, emailID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, userID, emailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, userID, emailID)
}

// GetUser mocks base method.
func (m *MockService) GetUser(ctx context.Context, userID model.UserID) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockServiceMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockService)(nil).GetUser), ctx, userID)
}

// LogIn mocks base method.
func (m *MockService) LogIn(ctx context.Context, name, password string) (model.AuthTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", ctx, name, password)
	ret0, _ := ret[0].(model.AuthTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogIn indicates an expected call of LogIn.
func (mr *MockServiceMockRecorder) LogIn(ctx, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockService)(nil).LogIn), ctx, name, password)
}

// LogOut mocks base method.
func (m *MockService) LogOut(ctx context.Context, userID model.UserID, deviceID model.DeviceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", ctx, userID, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockServiceMockRecorder) LogOut(ctx, userID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockService)(nil).LogOut), ctx, userID, deviceID)
}

// RefreshToken mocks base method.
func (m *MockService) RefreshToken(ctx context.Context, refreshToken string) (model.AuthTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(model.AuthTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockServiceMockRecorder) RefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockService)(nil).RefreshToken), ctx, refreshToken)
}

// Register mocks base method.
func (m *MockService) Register(ctx context.Context, emailID model.EmailID, name, password string) (model.AuthTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, emailID, name, password)
	ret0, _ := ret[0].(model.AuthTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockServiceMockRecorder) Register(ctx, emailID, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), ctx, emailID, name, password)
}

// UpdateUser mocks base method.
func (m *MockService) UpdateUser(ctx context.Context, userID model.UserID, name, password string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userID, name, password)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServiceMockRecorder) UpdateUser(ctx, userID, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockService)(nil).UpdateUser), ctx, userID, name, password)
}
